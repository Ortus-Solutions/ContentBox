name: ContentBox Test Suites

# We are a reusable Workflow only
on:
  workflow_call:
    secrets:
      SLACK_WEBHOOK_URL:
        required: false

jobs:
  tests:
    name: Test Suites
    runs-on: ubuntu-20.04
    env:
      DB_USER: root
      DB_PASSWORD: root
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        cfengine: [ "lucee@5", "adobe@2018", "adobe@2021", "adobe@2023" ]
        coldboxVersion: [ "^7" ]
        jdkVersion: [ "11" ]
        experimental: [ false ]
        include:
          # Engines BE
          - cfengine: "lucee@be"
            coldboxVersion: "^7"
            jdkVersion: "17"
            experimental: true
          - cfengine: "lucee@6"
            coldboxVersion: "^7"
            jdkVersion: "17"
            experimental: true
          # ColdBox BE on all allowed distros
          # This makes sure we don't have any issues with the BE of ColdBox
          - cfengine: "lucee@5"
            coldboxVersion: "be"
            jdkVersion: "11"
            experimental: true
          - cfengine: "adobe@2021"
            coldboxVersion: "be"
            jdkVersion: "11"
            experimental: true
          - cfengine: "adobe@2023"
            coldboxVersion: "be"
            jdkVersion: "17"
            experimental: true

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Database and Fixtures
        run: |
          sudo systemctl start mysql.service
          mysql -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} -e 'CREATE DATABASE contentbox;'
          mysql -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} < tests/resources/sql/mysql/contentbox.sql

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ matrix.jdkVersion }}

      - name: Setup CommandBox CLI
        uses: Ortus-Solutions/setup-commandbox@v2.0.1

      - name: Setup .env For Runner
        run: |
          touch .env
          printf "ENVIRONMENT=development\n" >> .env
          printf "DB_HOST=127.0.0.1\n" >> .env
          printf "DB_DATABASE=contentbox\n" >> .env
          printf "DB_DRIVER=MySQL\n" >> .env
          printf "DB_USER=${{ env.DB_USER }}\n" >> .env
          printf "DB_PASSWORD=${{ env.DB_PASSWORD }}\n" >> .env
          printf "DB_CLASS=com.mysql.cj.jdbc.Driver\n" >> .env
          printf "DB_BUNDLEVERSION=8.0.24\n" >> .env
          printf "DB_BUNDLENAME=com.mysql.cj\n" >> .env
          printf "DB_CONNECTIONSTRING=jdbc:mysql://127.0.0.1:3306/contentbox?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&useLegacyDatetimeCode=true\n" >> .env

      - name: Add Hibernate Logging
        if: "${{ matrix.cfengine != 'lucee@5' }}"
        run: |
          # Log4j Hibernate Debug
          mkdir -p .engines/acf2018/WEB-INF/cfusion/lib/
          mkdir -p .engines/acf2021/WEB-INF/cfusion/lib/
          mkdir -p .engines/acf2023/WEB-INF/cfusion/lib/
          cp build/resources/log4j.properties .engines/acf2018/WEB-INF/cfusion/lib/
          cp build/resources/log4j.properties .engines/acf2021/WEB-INF/cfusion/lib/
          cp build/resources/log4j.properties .engines/acf2023/WEB-INF/cfusion/lib/

      - name: Install Test Harness with ColdBox ${{ matrix.coldboxVersion }}
        run: |
          # Seed ColdBox Version
          box package set dependencies.coldbox=${{ matrix.coldboxVersion }}
          # Install Dependencies
          box run-script contentbox:install

      - name: Start ${{ matrix.cfengine }} Server
        run: |
          # Startup the Server
          box server start serverConfigFile="server-${{ matrix.cfengine }}.json" --noSaveSettings --debug
          # Test site build up
          curl http://127.0.0.1:8589

      - name: Run Web App Tests
        run: |
          mkdir tests/results/web
          box testbox run --verbose runner=default outputFile=tests/results/web/test-results outputFormats=json,antjunit

      - name: Run API Tests
        run: |
          mkdir tests/results/api
          box testbox run --verbose runner=api outputFile=tests/results/api/test-results outputFormats=json,antjunit

      - name: Run Swagger Tests
        run: |
          curl "http://127.0.0.1:8589/index.cfm/cbswagger?debugmode=false&debugpassword=cb" -o "tests/results/contentbox-swagger.json"

      - name: Upload Test Results Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: contentbox-test-results-${{ matrix.cfengine }}-jdk${{ matrix.jdkVersion }}-coldbox${{ matrix.coldboxVersion }}-experimental-${{ matrix.experimental }}
          path: |
            tests/results/**/*

      - name: Slack Notification
        if: ${{ failure() && !startsWith( 'pull_request', github.event_name ) }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: coding
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'green' or '#ff00ff'
          SLACK_ICON_EMOJI: ":bell:"
          SLACK_MESSAGE: 'ContentBox tests failed :cry:, check them out here: https://github.com/Ortus-Solutions/ContentBox/actions'
          SLACK_TITLE: ContentBox Tests For ${{ matrix.cfengine }} failed
          SLACK_USERNAME: CI
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Failure Debugging Info
        if: ${{ failure() }}
        run: |
          if [[ "{{ matrix.cfengine }}" == "adobe@2018" ]] ; then
            cat .engines/acf2018/WEB-INF/cfusion/logs/hibernatesql.log
          fi
          if [[ "{{ matrix.cfengine }}" == "adobe@2021" ]] ; then
            cat .engines/acf2021/WEB-INF/cfusion/logs/hibernatesql.log
          fi
          if [[ "{{ matrix.cfengine }}" == "adobe@2023" ]] ; then
            cat .engines/acf2023/WEB-INF/cfusion/logs/hibernatesql.log
          fi
          box server info serverConfigFile="server-${{ matrix.cfengine }}.json" --json
          box server log serverConfigFile="server-${{ matrix.cfengine }}.json"

      - name: Upload Debugging Info To Artifacts
        if: ${{ failure() && !startsWith( 'pull_request', github.event_name ) }}
        uses: actions/upload-artifact@v4
        with:
          name: Failure Debugging Info - ${{ matrix.cfengine }} jdk:${{ matrix.jdkVersion }} coldbox:${{ matrix.coldboxVersion }}
          path: |
            .engine/**/logs/*
            .engine/**/WEB-INF/cfusion/logs/*

  # Publish Test Results
  publish_test_results:
    name: Publish Test Results
    needs: tests
    runs-on: ubuntu-latest
    permissions:
      checks: write
    if: always()
    steps:
      # Download the test results
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: artifacts/**/*.xml
