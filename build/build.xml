<?xml version="1.0"?>
<!-- ======================================================================
     ContentBox Modular CMS Build
     ====================================================================== -->
 <project name="contentbox-build" default="build.all" basedir="../">
 	<description>
    	Build a new distribution of ContentBox Modular CMS
    </description>

 	<!-- Version: UPDATE ON EACH RELEASE AS NEEDED -->
 	<property name="groupID"					value="ortussolutions" />
 	<property name="contentbox.slug"			value="contentbox"/>

	<!-- Branch Building -->
    <condition property="build.branch" else="development">
    	<isset property="build.branch"/>
    </condition>

 	<!-- Build Labels -->
	<tstamp prefix="start"/>

 	<!-- Load Contrib Tasks -->
	<path id="cp">
		<fileset dir="build/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- Define Tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="cp" />
 	<!-- Import Box-Repo Tasks -->
	<import><url url="https://raw.githubusercontent.com/Ortus-Solutions/box-tasks/master/box-repo.xml"/></import>

	<!-- Init -->
	<target name="init" description="Init build" unless="src.isInit">
		<!-- Default environment check, if not passed via -Denvironment -->
		<condition property="environment" value="local">
			<not><isset property="environment" /></not>
		</condition>
		<if>
			<available file="build/build-${environment}.properties" />
			<then>
				<!-- Load env properties -->
				<echo>Loading properties from environment: ${environment}</echo>
				<loadproperties srcFile="build/build-${environment}.properties"/>
			</then>
		</if>

		<!-- Load root properties -->
		<echo>Loading base properties</echo>
		<loadproperties srcFile="build/build.properties"/>

		<!-- Cleanup + Init -->
		<mkdir dir="${dir.build}"/>
		<mkdir dir="${be.exports}"/>
		<chmod file="${dir.build}/**" perm="g+wxrs" type="both" />

		<!-- Build Number -->
		<if>
			<not><available file="${be.exports}/build.number" /></not>
			<then><touch file="${be.exports}/build.number" /></then>
		</if>
		<if>
			<not><isset property="build.number" /></not>
			<then>
				<propertyfile file="${be.exports}/build.number" comment="Build Number for ANT. Edit not!">
					<entry key="build.number"
							type="int"
					     	operation="+"
							pattern="00000"
					     	default="00210" />
				</propertyfile>
				<property file="${be.exports}/build.number"/>
			</then>
		</if>

		<!-- Build ID -->
		<property name="build.label" value="contentbox-${contentbox.version}+${build.number}-${start.DSTAMP}${start.TSTAMP}"/>

		<!-- Version Identifier -->
		<concat destfile="${dir.build}/version.json">{ "version" : "${contentbox.version}" }</concat>

		<!-- Get Build Dependencies -->
 		<antcall target="getDependencies" />

		<!-- Mark as init -->
		<property name="src.isInit" value="true" />
	</target>

	<!-- Build module distro -->
	<target name="build.module" description="Build a new ContentBox module source release" depends="init">
		<!-- Create module Build dir -->
		<mkdir dir="${dir.build}/module"/>

		<!-- Copy build ID -->
		<concat destfile="${dir.build}/module/${build.label}">Build Number: ${build.number}, Built on ${start.TODAY}</concat>

		<!-- Copy Source -->
      	<copy todir="${dir.build}/module" encoding="UTF-8">
      		<fileset dir="modules/contentbox">
      			<exclude name="modules/contentbox-deps/modules/**" />
      			<exclude name="modules/contentbox/modules/contentbox-admin/resources/**" />
      			<exclude name="modules/contentbox/themes/default/resources/**" />
      			<exclude name="**/node_modules/**" />
      		</fileset>
      		<fileset file="readme.md" />
        </copy>

        <!-- Replace Version + Build Numbers -->
        <replaceregexp match='@version.number@' replace="${contentbox.version}" flags="ig" byline="true" encoding="UTF-8">
			<fileset dir="${dir.build}/module" />
		</replaceregexp>
        <!-- Determine snapshot vs master artifact -->
		<if>
			<equals arg1="${build.branch}" arg2="development" />
			<then>
				<replaceregexp match='\+@build.number@' replace="-snapshot" flags="ig" byline="true" encoding="UTF-8">
				  <fileset dir="${dir.build}/module" />
				</replaceregexp>
			</then>
			<else>
				<replaceregexp match='@build.number@' replace="${build.number}" flags="ig" byline="true" encoding="UTF-8">
				  <fileset dir="${dir.build}/module" />
				</replaceregexp>
			</else>
		</if>

		<!-- Zip Module Release with no dependencies -->
		<zip 	destfile="${dir.contentbox.exports}/contentbox-${contentbox.version}.zip"
				basedir="${dir.build}/module"
		/>
		<!-- Build Checksum -->
		<checksum forceoverwrite="true" fileext=".md5" file="${dir.contentbox.exports}/contentbox-${contentbox.version}.zip" />
		<checksum forceoverwrite="true" fileext=".sha512" algorithm="SHA-512" file="${dir.contentbox.exports}/contentbox-${contentbox.version}.zip" />

		<!-- copy box.json to root of exports -->
		<copy file="${dir.build}/module/box.json" toFile="${dir.contentbox.exports}/box.json" overwrite="true"  encoding="UTF-8"/>
	</target>

	<!-- Build installer distro -->
	<target name="build.installer" description="Build a new ContentBox installer release" depends="build.module">
		<!-- Create Installer Build directory -->
		<mkdir dir="${dir.build}/installer"/>
		<mkdir dir="${dir.build}/installer-module"/>

		<!-- Copy build ID -->
		<concat destfile="${dir.build}/installer/${build.label}">Build Number: ${build.number}, Built on ${start.TODAY}</concat>
		<concat destfile="${dir.build}/installer-module/${build.label}">Build Number: ${build.number}, Built on ${start.TODAY}</concat>

		<!-- Copy Source -->
      	<copy todir="${dir.build}/installer" encoding="UTF-8">
      		<fileset dir=".">
				<exclude name="Icon*" />
				<exclude name=".*/**" />
      			<exclude name="artifacts/**" />
      			<exclude name="build/**" />
      			<exclude name="box*.json" />
      			<exclude name="coldbox/**" />
      			<exclude name="config/logs/**" />
      			<exclude name="server.json" />
      			<exclude name="server-*.json" />
      			<exclude name="tests/**" />
      			<exclude name="testbox/**" />
      			<exclude name="workbench/**" />
      			<exclude name="**/bower_components/**" />
				<exclude name="**/app_modules/**" />
      			<exclude name="**/node_modules/**" />
      			<!-- Remove Dependencies -->
      			<exclude name="modules/contentbox/**" />
      		</fileset>
        </copy>

        <!-- Copy installer module source -->
      	<copy todir="${dir.build}/installer-module" encoding="UTF-8">
      		<fileset dir="modules/contentbox-installer">
      			<exclude name="**/bower_components/**" />
				<exclude name="**/app_modules/**" />
      			<exclude name="**/node_modules/**" />
      		</fileset>
      		<fileset file="readme.md" />
        </copy>

        <!-- Create site box.json -->
        <copy file="box-site.json" toFile="${dir.build}/installer/box.json" overwrite="true"  encoding="UTF-8"/>
		<!-- Create .env -->
        <copy file=".env.template" toFile="${dir.build}/installer/.env" overwrite="true"  encoding="UTF-8"/>
		<!-- Create .cfconfig -->
        <copy file=".cfconfig.json" toFile="${dir.build}/installer/.cfconfig.json" overwrite="true"  encoding="UTF-8"/>
		<!-- Copy git ignore -->
		<copy file="build/resources/gitignore" toFile="${dir.build}/installer/.gitignore" overwrite="true"  encoding="UTF-8"/>

        <!-- Copy cfmlengineless server.json -->
        <copy file="build/resources/server.json" toFile="${dir.build}/installer/server.json" overwrite="true"  encoding="UTF-8"/>

        <!-- replace slugs -->
        <replaceregexp match='\-site' replace="-installer" flags="ig" byline="true" encoding="UTF-8">
			<fileset file="${dir.build}/installer/box.json" />
		</replaceregexp>
		<replaceregexp match='Site' replace="Installer" flags="g" byline="true" encoding="UTF-8">
			<fileset file="${dir.build}/installer/box.json" />
		</replaceregexp>

        <!-- Replace Version + Build Numbers -->
        <replaceregexp match='@version.number@' replace="${contentbox.version}" flags="ig" byline="true" encoding="UTF-8">
			<fileset dir="${dir.build}/installer" />
			<fileset dir="${dir.build}/installer-module" />
		</replaceregexp>
        <!-- Determine snapshot vs master artifact -->
		<if>
			<equals arg1="${build.branch}" arg2="development" />
			<then>
				<replaceregexp match='\+@build.number@' replace="-snapshot" flags="ig" byline="true" encoding="UTF-8">
				  <fileset dir="${dir.build}/installer" />
				  <fileset dir="${dir.build}/installer-module" />
				</replaceregexp>
			</then>
			<else>
				<!-- Don't put a build number for the dependency -->
				<replaceregexp match='\+@build.number@' replace="" flags="ig" byline="true" encoding="UTF-8">
				  <fileset file="${dir.build}/installer/box.json" />
				  <fileset file="${dir.build}/installer-module/box.json" />
				</replaceregexp>
				<!-- Regular build numbers -->
				<replaceregexp match='@build.number@' replace="${build.number}" flags="ig" byline="true" encoding="UTF-8">
				  <fileset dir="${dir.build}/installer" />
				  <fileset dir="${dir.build}/installer-module" />
				</replaceregexp>
			</else>
		</if>

		<!-- Zip Module Release with no dependencies -->
		<zip 	destfile="${dir.contentbox.exports}/contentbox-installer-${contentbox.version}.zip"
				basedir="${dir.build}/installer"
		/>
		<zip 	destfile="${dir.contentbox.exports}/contentbox-installer-module-${contentbox.version}.zip"
				basedir="${dir.build}/installer-module"
		/>

		<!-- Build Checksum -->
		<checksum forceoverwrite="true" fileext=".md5" file="${dir.contentbox.exports}/contentbox-installer-${contentbox.version}.zip" />
		<checksum forceoverwrite="true" fileext=".sha512" algorithm="SHA-512" file="${dir.contentbox.exports}/contentbox-installer-${contentbox.version}.zip" />
		<checksum forceoverwrite="true" fileext=".md5" file="${dir.contentbox.exports}/contentbox-installer-module-${contentbox.version}.zip" />
		<checksum forceoverwrite="true" fileext=".sha512" algorithm="SHA-512" file="${dir.contentbox.exports}/contentbox-installer-module-${contentbox.version}.zip" />

		<!-- copy box.json to root of exports -->
		<copy file="${dir.build}/installer/box.json" toFile="${dir.contentbox.exports}/box-installer.json" overwrite="true"  encoding="UTF-8"/>
		<copy file="${dir.build}/installer-module/box.json" toFile="${dir.contentbox.exports}/box-installer-module.json" overwrite="true"  encoding="UTF-8"/>
	</target>

	<!-- Build site distro -->
	<target name="build.site" description="Build a new ContentBox site release" depends="build.installer">
		<!-- Create site Build dir -->
		<mkdir dir="${dir.build}/site"/>

		<!-- Copy build ID -->
		<concat destfile="${dir.build}/site/${build.label}">Build Number: ${build.number}, Built on ${start.TODAY}</concat>

		<!-- Copy Source -->
      	<copy todir="${dir.build}/site" encoding="UTF-8">
      		<fileset dir="${dir.build}/installer">
      			<!-- Remove Dependencies -->
      			<exclude name="modules/**" />
      		</fileset>
        </copy>

        <!-- replace slugs -->
        <replaceregexp match='\-installer' replace="-site" flags="ig" byline="true" encoding="UTF-8">
			<fileset file="${dir.build}/site/box.json" />
		</replaceregexp>
		<replaceregexp match='Installer' replace="Site" flags="g" byline="true" encoding="UTF-8">
			<fileset file="${dir.build}/installer/box.json" />
		</replaceregexp>

		<!-- Zip Module Release with no dependencies -->
		<zip 	destfile="${dir.contentbox.exports}/contentbox-site-${contentbox.version}.zip"
				basedir="${dir.build}/site"
		/>

		<!-- Build Checksum -->
		<checksum forceoverwrite="true" fileext=".md5" file="${dir.contentbox.exports}/contentbox-site-${contentbox.version}.zip" />
		<checksum forceoverwrite="true" fileext=".sha512" algorithm="SHA-512" file="${dir.contentbox.exports}/contentbox-site-${contentbox.version}.zip" />

		<!-- copy box.json to root of exports -->
		<copy file="${dir.build}/site/box.json" toFile="${dir.contentbox.exports}/box-site.json" overwrite="true"  encoding="UTF-8"/>
	</target>

 	<!-- Build WAR Deployment -->
 	<target name="build.war" description="Build a new ContentBox WAR distribution" depends="build.site">
 		<!-- Unzip War -->
 		<unzip dest="${dir.build}/war" src="${dir.dependencies}/lucee-${lucee.version}.war" overwrite="true">
			<patternset>
		        <exclude name="Application.cfc"/>
				<exclude name="index.cfm"/>
				<exclude name="favicon.ico"/>
				<exclude name="License.txt"/>
				<exclude name="assets/**"/>
		    </patternset>
 		</unzip>

 		<!-- Replace web.xml with our spiced up web.xml -->
 		<copy file="${dir.resources}/web.xml" toDir="${dir.build}/war/WEB-INF" overwrite="true" encoding="UTF-8"/>

 		<!-- Create Patch directory-->
 		<mkdir dir="${dir.build}/war/WEB-INF/lib/lucee-server/patches"/>

 		<!-- Deliver Patch if Available -->
 		<if>
 			<not><equals arg1="${lucee.patch}" arg2=""></equals></not>
 			<then>
	 			<copy 	file="${dir.dependencies}/lucee-${lucee.patch}.lco"
	 					toFile="${dir.build}/WEB-INF/lib/lucee-server/patches/${lucee.patch}.lco"
	 					encoding="UTF-8" />
 			</then>
 		</if>

 		<!-- Copy Tuckey Config and Binary -->
 		<copy file="${dir.resources}/urlrewrite.xml" toDir="${dir.build}/war/WEB-INF" overwrite="true" encoding="UTF-8"/>
 		<copy file="${dir.dependencies}/urlrewritefilter-${tuckey.version}.jar" toDir="${dir.build}/war/WEB-INF/lib" overwrite="true" encoding="UTF-8"/>

 		<!-- Copy ContentBox Installer -->
 		<copy toDir="${dir.build}/war" overwrite="true" encoding="UTF-8">
			<fileset dir="${dir.build}/installer" />
 		</copy>
 		<!-- Copy ContentBox Module -->
 		<copy toDir="${dir.build}/war/modules/contentbox" overwrite="true" encoding="UTF-8">
			<fileset dir="${dir.build}/module" />
 		</copy>
 		<!-- Install ContentBox dependencies -->
		<exec executable="box" dir="${dir.build}/war/modules/contentbox">
			<arg line="install production=true" />
		</exec>
		<!-- Install ContentBox dependencies -->
		<exec executable="box" dir="${dir.build}/war">
			<arg line="install id=coldbox@${coldbox.version} production=true" />
		</exec>

 		<!-- Create War -->
		<zip destfile="${dir.contentbox.exports}/contentbox-${contentbox.version}.war" basedir="${dir.build}/war" />
 		<zip destfile="${dir.contentbox.exports}/contentbox-war-${contentbox.version}.zip">
			<fileset file="${dir.contentbox.exports}/contentbox-${contentbox.version}.war" />
 		</zip>

		<!-- Create Installer With Dependencies -->
		<zip destfile="${dir.contentbox.exports}/contentbox-installer-with-dependencies-${contentbox.version}.zip" basedir="${dir.build}/war">
			<patternset>
				<exclude name="modules/cbdebugger/**"/>
				<exclude name="modules/route-visualizer/**"/>
		        <exclude name="WEB-INF/**"/>
		    </patternset>
		</zip>

		<!-- Cleanup -->
 		<delete file="${dir.contentbox.exports}/contentbox-${contentbox.version}.war" />

 		<!-- Build Checksum -->
 		<checksum forceoverwrite="true" fileext=".md5" file="${dir.contentbox.exports}/contentbox-war-${contentbox.version}.zip" />
 		<checksum forceoverwrite="true" fileext=".sha512" algorithm="SHA-512" file="${dir.contentbox.exports}/contentbox-war-${contentbox.version}.zip" />
		<checksum forceoverwrite="true" fileext=".md5" file="${dir.contentbox.exports}/contentbox-installer-with-dependencies-${contentbox.version}.zip" />
		<checksum forceoverwrite="true" fileext=".sha512" algorithm="SHA-512" file="${dir.contentbox.exports}/contentbox-installer-with-dependencies-${contentbox.version}.zip" />
 	</target>

 	<!-- Build Express Edition -->
 	<target name="build.express" description="Build an express server" depends="build.war">
 		<!-- Unzip tomcat -->
 		<unzip dest="${dir.build}" src="${dir.dependencies}/apache-tomcat-${express.server.version}.zip"/>
 		<move todir="${dir.build}/express">
			<fileset dir="${dir.build}/apache-tomcat-${express.server.version}"/>
  		</move>

 		<!-- Remove current webapps -->
 		<delete includeemptydirs="true" >
 			<fileset dir="${dir.build}/express/webapps" />
 		</delete>

 		<!-- create root app -->
 		<mkdir dir="${dir.build}/express/webapps/ROOT" />

 		<!-- Copy ContentBox war into it -->
 		<copy toDir="${dir.build}/express/webapps/ROOT" overwrite="true" encoding="UTF-8">
			<fileset dir="${dir.build}/war" />
 		</copy>

		<!-- Copy admin password -->
		<copy file="${dir.resources}/password.txt" toDir="${dir.build}/express/webapps/ROOT/WEB-INF/lucee-server/context" overwrite="true" encoding="UTF-8"/>
		<!-- Copy inline datasource -->
		<copy file="${dir.resources}/datasource.cfm" toDir="${dir.build}/express/webapps/ROOT/config" overwrite="true" encoding="UTF-8"/>
		<!-- Add datasource include -->
		<replace file="${dir.build}/express/webapps/ROOT/Application.cfc"
				 value='include "config/datasource.cfm";'
				 summary="true"
				 token='this.datasource  = "contentbox";'
				 encoding="UTF-8"/>

 		<!-- Custom Server Config -->
 		<copy todir="${dir.build}/express" overwrite="true" encoding="UTF-8">
 			<fileset dir="${dir.resources}/express" />
 		</copy>

 		<!-- add execution perms -->
 		<chmod perm="ugo+rx">
 			<fileset dir="${dir.build}/express/bin" />
 		</chmod>

 		<!-- NO JRE EXPRESS -->
 		<zip destfile="${dir.contentbox.exports}/contentbox-express-${contentbox.version}.zip" basedir="${dir.build}/express" />

 		<!-- Build Checksums -->
		<checksum forceoverwrite="true" fileext=".md5">
			<fileset dir="${dir.contentbox.exports}">
				<include name="contentbox-express-*.zip" />
			</fileset>
		</checksum>
		<checksum forceoverwrite="true" fileext=".sha512" algorithm="SHA-512">
			<fileset dir="${dir.contentbox.exports}">
				<include name="contentbox-express-*.zip" />
			</fileset>
		</checksum>
 	</target>

	<!-- Build all releases-->
	<target
		name="build.all"
		description="Builds All ContentBox Release Flavors and patches"
		depends="build.express"
	>
		<!-- Copy as BE to root -->
		<copy toDir="${be.exports}" overwrite="true" encoding="UTF-8" verbose="true">
			<fileset dir="${dir.contentbox.exports}" />
			<mapper type="regexp" from="^(.*)(${contentbox.version})(.*)$" to="\1be\3" />
		</copy>
    </target>

 	<!-- Get Dependencies -->
	<target name="getDependencies" description="Get all the necessary dependencies for the build process using: box.repo.url">
		<!-- Download Dependency via box task-->
 		<box-dependency groupID="lucee"
 						artifactID="lucee"
 						version="${lucee.version}"
 						extension="war"
 						destination="${dir.dependencies}"/>
 		<!-- Download Dependency via box task-->
 		<box-dependency groupID="tuckey"
 						artifactID="urlrewritefilter"
 						version="${tuckey.version}"
 						extension="jar"
 						destination="${dir.dependencies}"/>
 		<!-- Download Dependency via box task-->
 		<box-dependency groupID="apache"
 						artifactID="apache-tomcat"
 						version="${express.server.version}"
 						destination="${dir.dependencies}"/>
		<!-- Download Dependency via box task-->
		<if>
 			<not><equals arg1="${lucee.patch}" arg2=""></equals></not>
 			<then>
	 			<box-dependency groupID="lucee"
		 						artifactID="lucee"
		 						version="${lucee.patch}"
		 						extension="lco"
		 						destination="${dir.dependencies}"/>
 			</then>
 		</if>
 		<!-- Download Dependency via box task
 		<box-dependency groupID="oracle"
 						artifactID="jre"
 						version="${jre.version}"
 						destination="${dir.dependencies}"
 						classifiers="win64"/>
 		<box-dependency groupID="oracle"
 						artifactID="jre"
 						version="${jre.version}"
 						destination="${dir.dependencies}"
 						classifiers="darwin64"/>
 		<box-dependency groupID="oracle"
 						artifactID="jre"
 						version="${jre.version}"
 						destination="${dir.dependencies}"
 						classifiers="linux64"/>
		-->
	</target>

</project>